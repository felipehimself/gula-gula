import { useState } from 'react';
import type { NextPage } from 'next';
import { GetServerSideProps } from 'next';
import Head from 'next/head';

import BottomTab from '../../components/BottomTab/BottomTab';
import Topbar from '../../components/Topbar/Topbar';

import User from '../../models/User';
import Order from '../../models/Order';
import { connect } from 'mongoose';

import AccountForm from '../../components/AccountForm/AccountForm';
import { LoggedUser, Order as OrderType } from '../../ts/types/types';

import { formatDate } from '../../utils/functions';

import CartItem from '../../components/CartItem/CartItem';

const { AnimatePresence } = require('framer-motion');

import globalStyles from './../../styles/Global.module.css';
import styles from './../../styles/MyAccount.module.css';

import * as jose from 'jose';

const MONGODB_URI = process.env.MONGODB_URI || '';
const JWT_SECRET = process.env.JWT_SECRET;

const MyAccount: NextPage<{ userInfo: LoggedUser; orders: OrderType[] }> = ({
  userInfo,
  orders,
}) => {
  const [editInfo, setEditInfo] = useState(false);
  const [activeTab, setActiveTab] = useState('data');

  return (
    <>
      <Head>
        <title>
          {userInfo.address.isAddressRegistered
            ? 'Minha Conta'
            : 'Finalizar Cadastro'}
        </title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Topbar
        title={
          userInfo.address.isAddressRegistered
            ? 'Minha Conta'
            : 'Finalizar Cadastro'
        }
      />
      <AnimatePresence>
        {!userInfo.address.isAddressRegistered && (
          <AccountForm userInfo={userInfo} />
        )}
      </AnimatePresence>

      <AnimatePresence>
        {editInfo && (
          <AccountForm
            setEditInfo={setEditInfo}
            editInfo={editInfo}
            userInfo={userInfo}
          />
        )}
      </AnimatePresence>

      {!editInfo && userInfo.address.isAddressRegistered && (
        <>
          <div className={`${globalStyles.spacing}`}>
            <div className={styles.tabContainer}>
              <button
                className={activeTab == 'data' ? styles.active : undefined}
                onClick={() => setActiveTab('data')}
              >
                Meus Dados
              </button>
              <button
                className={activeTab == 'orders' ? styles.active : undefined}
                onClick={() => setActiveTab('orders')}
              >
                Meus Pedidos
              </button>
            </div>
          </div>

          {activeTab === 'data' && (
            <section
              className={`${globalStyles.container} ${styles.innerContainer} `}
            >
              <div className={styles.infoContainer}>
                <div>
                  <h4>Nome</h4>
                  <p>{userInfo.name}</p>
                </div>
                <div>
                  <h4>E-mail</h4>
                  <p>{userInfo.email}</p>
                </div>
                <div>
                  <button
                    onClick={() => setEditInfo(true)}
                    className={styles.editBtn}
                  >
                    Editar
                  </button>
                </div>
              </div>

              <div className={styles.addressContainer}>
                <div>
                  <h4>Logradouro</h4>
                  <p>
                    {userInfo.address.street}, {userInfo.address.number}
                  </p>
                </div>
                <div>
                  <h4>Bairro</h4>
                  <p>{userInfo.address.district}</p>
                </div>

                <div>
                  <h4>Cidade</h4>
                  <p>{userInfo.address.city}</p>
                </div>

                <div>
                  <h4>Complemento</h4>
                  <p>
                    {userInfo.address.additional
                      ? userInfo.address.additional
                      : '-'}
                  </p>
                </div>

                <div>
                  <h4>CEP</h4>
                  <p>{userInfo.address.zipCode}</p>
                </div>
                <div>
                  <h4>Estado</h4>
                  <p>{userInfo.address.federalUnit}</p>
                </div>
              </div>
            </section>
          )}

          {activeTab === 'orders' && (
            <section
              className={`${globalStyles.container} ${styles.innerContainer} ${styles.ordersContainer} `}
            >
              {orders?.map((order) => {
                return (
                  <div key={order._id} className={styles.orderCard}>
                    <div
                      className={`${globalStyles.flexRowBetween} ${styles.dateContainer} `}
                    >
                      <h4>Pedido: {order._id.slice(-6)} </h4>
                      <p>{formatDate(order.createdAt)}</p>
                    </div>

                    {order?.products?.map((product) => {
                      return <CartItem key={product.orderId} item={product} />;
                    })}
                    <div className={styles.totalOrderContainer}>
                      <div className={`${globalStyles.flexRowBetween} `}>
                        <h4>Forma de pagamento</h4> <p>{order.paymentMethod}</p>
                      </div>
                      <div className={`${globalStyles.flexRowBetween} `}>
                        <h4>Descontos</h4>
                        <p>
                          {order?.total! - order?.totalWithDiscount!
                            ? '- R$ ' +
                              (
                                order?.total! - order?.totalWithDiscount!
                              ).toFixed(2)
                            : '-'}
                        </p>
                      </div>
                      <div className={`${globalStyles.flexRowBetween} `}>
                        <h4>Total</h4>
                        <p>R$ {order?.totalWithDiscount?.toFixed(2)}</p>
                      </div>
                    </div>
                  </div>
                );
              })}

              {orders.length === 0 && (
                <div className={styles.spacing}>
                  <p className={globalStyles.center}>
                    VocÃª ainda nÃ£o fez pedidos ðŸ™‚
                  </p>
                </div>
              )}
            </section>
          )}
        </>
      )}

      <BottomTab isLoggedIn={true} />
    </>
  );
};
export default MyAccount;

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  await connect(MONGODB_URI);
  const jwt = ctx?.req?.cookies?.GulaGulaJwt;

  const res = await jose.jwtVerify(jwt!, new TextEncoder().encode(JWT_SECRET));
  const _id = await res.payload.userId;
  const user = await User.findById(_id);
  const orders = await Order.find({ customerId: _id }, { customerId: 0 });
  const ordersParsed = JSON.parse(JSON.stringify(orders));

  return {
    props: {
      userInfo: {
        name: user!.name,
        email: user!.email,
        address: { ...user!.address },
      },
      orders: ordersParsed,
    },
  };
};
