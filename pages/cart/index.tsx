import { useState } from 'react';
import type { GetServerSideProps, NextPage } from 'next';
import Link from 'next/link';
import { useRouter } from 'next/router';

import Topbar from '../../components/Topbar/Topbar';
import BottomTab from '../../components/BottomTab/BottomTab';
import ModalCupom from '../../components/ModalCupom/ModalCupom';
import ButtonLink from '../../components/ButtonLink/ButtonLink';
import Button from '../../components/Button/Button';
import CartItem from '../../components/CartItem/CartItem';
import { HiOutlineTicket } from 'react-icons/hi';
import globalStyles from './../../styles/Global.module.css';
import styles from './../../styles/Cart.module.css';

import { Toaster } from 'react-hot-toast';
import { notify } from '../../lib/hotToast';
const { motion } = require('framer-motion');

import { useSelector } from 'react-redux';
import { RootState, useAppDispatch } from '../../store/store';
import { cleanCart } from '../../features/cartSlice';

import axios, { AxiosResponse } from 'axios';
const { AnimatePresence } = require('framer-motion');
import { ThreeDots } from 'react-loading-icons';

import { PAYMENT_METHODS } from '../../utils/constants';
import * as jose from 'jose';
import Head from 'next/head';
import User from '../../models/User';
import { IAddress } from '../../ts/interfaces/user';
const JWT_SECRET = process.env.JWT_SECRET;

import { useGetBusinessTime } from '../../hooks/hooks';

const Cart: NextPage<{ isLoggedIn: boolean; userAddress: IAddress | null }> = ({
  isLoggedIn,
  userAddress,
}) => {
  const [isLoading, setIsLoading] = useState(false);
  const [showModalCupom, setShowModalCupom] = useState(false);
  const [paymentMethod, setPaymentMethod] = useState('');

  const { isOpen } = useGetBusinessTime();

  const dispatch = useAppDispatch();
  const router = useRouter();

  const { values, total, discount, cupom } = useSelector(
    (state: RootState) => state.cart
  );

  const handleSubmit = async () => {
    if (!paymentMethod) return;

    setIsLoading(true);
    try {
      await axios.post<AxiosResponse>('/api/order', {
        products: values,
        total: total,
        discount: discount,
        cupom: cupom,
        paymentMethod: paymentMethod,
      });
      notify('Pedido efetuado com sucesso');

      setTimeout(() => {
        dispatch(cleanCart());
        router.push('/');
        setIsLoading(false);
      }, 3000);
    } catch (error: any) {
      console.log(error);
      setIsLoading(false);
    }
  };

  return (
    <>
      <Head>
        <title>Carrinho</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <Topbar title='Meu Pedido' />
      <>
        <Toaster
          containerStyle={{
            top: 20,
            left: 20,
            bottom: 20,
            right: 20,
          }}
        />
        <motion.section
          layout
          className={`${styles.section} ${globalStyles.containerSpacing}`}
        >
          {values.length > 0 ? (
            <>
              {values.map((item, ind) => {
                return (
                  <CartItem
                    index={ind}
                    isEditable={true}
                    key={item.orderId}
                    item={item}
                  />
                );
              })}

              <div className={globalStyles.flexRowBetween}>
                <h4>Total</h4>
                <h4>R$ {total.toFixed(2)}</h4>
              </div>
            </>
          ) : (
            <h3 className={`${globalStyles.center} ${styles.emptyCartInfo}`}>
              Seu carrinho est치 vazio
            </h3>
          )}

          <Link href='/'>
            <a aria-label='Ir para o menu'>
              <ButtonLink>
                {values.length > 0 ? 'Adicionar mais itens' : 'Adicionar itens'}
              </ButtonLink>
            </a>
          </Link>
        </motion.section>
      </>

      {values.length > 0 && (
        <div className={`${globalStyles.customBackground} ${styles.spacing}`}>
          <article className={globalStyles.container}>
            <div className={styles.innerContainer}>
              {isLoggedIn ? (
                <>
                  <h4>Cupom</h4>
                  <button
                    onClick={() => setShowModalCupom(true)}
                    className={`${styles.btnCupom}`}
                    aria-label='Inserir cupom'
                  >
                    <HiOutlineTicket size={18} />
                    Inserir cupom
                  </button>
                  <hr />
                  <div className={styles.shippingContainer}>
                    <div className={styles.shippingInfo}>
                      <div className={globalStyles.flexRowBetween}>
                        <h4>Dados para envio</h4>
                        <Link href='/account/my-account'>
                          <a aria-label='Editar dados cadastrados'>editar</a>
                        </Link>
                      </div>
                      <p>
                        {userAddress?.street}, {userAddress?.number} <br />
                        {userAddress?.additional}, {userAddress?.district},{' '}
                        {userAddress?.city}
                      </p>
                    </div>
                    <div className={styles.paymentContainer}>
                      <h4>Forma de pagamento</h4>
                      {PAYMENT_METHODS.map((method) => {
                        return (
                          <div
                            key={method}
                            className={globalStyles.flexRowBetween}
                          >
                            <label htmlFor={method}>{method}</label>
                            <input
                              type='radio'
                              value={method}
                              name='paymentMethod'
                              id={method}
                              onChange={(e) => setPaymentMethod(e.target.value)}
                            />
                          </div>
                        );
                      })}
                    </div>

                    <div className={styles.paymentContainer}>
                      <h4>Resumo de valores</h4>
                      <div className={globalStyles.flexRowBetween}>
                        <p>Cupom</p>
                        <p>
                          {cupom
                            ? '- R$ ' + (total * discount).toFixed(2)
                            : '-'}
                        </p>
                      </div>
                      <div className={globalStyles.flexRowBetween}>
                        <p>Entrega</p>
                        <p>Gr치tis</p>
                      </div>
                    </div>

                    <div className={globalStyles.flexRowBetween}>
                      <h4>Valor Final</h4>
                      <h4>R$ {(total - total * discount).toFixed(2)}</h4>
                    </div>
                  </div>
                  <hr />

                  {isOpen ? (
                    <Button
                      disabled={!paymentMethod || isLoading}
                      type='button'
                      onClick={handleSubmit}
                      aria-label='Enviar pedido'
                    >
                      {!isLoading ? 'Enviar pedido' : <ThreeDots height={9} />}
                    </Button>
                  ) : (
                    <div className={styles.businessClosed}>
                      <h3 className={globalStyles.center}>
                        Estamos fechados no momento
                      </h3>
                      <p className={globalStyles.center}>
                        
                        <Link href='/about'>
                          <a> Consulte nosso hor치rio de funcionamento</a>
                        </Link>
                      </p>
                    </div>
                  )}
                </>
              ) : (
                <>
                  <h4 className={`${globalStyles.center}`}>
                    J치 tem uma conta?
                  </h4>
                  <Link href='/auth/login'>
                    <a aria-label='Fazer login'>
                      <ButtonLink>Fazer Login</ButtonLink>
                    </a>
                  </Link>

                  <span className={globalStyles.center}>ou</span>

                  <Link href='/auth/signup'>
                    <a aria-label='Criar cadastro'>
                      <ButtonLink>Cadastre-se</ButtonLink>
                    </a>
                  </Link>
                </>
              )}
            </div>
          </article>
        </div>
      )}

      <AnimatePresence>
        {showModalCupom && <ModalCupom setShowModal={setShowModalCupom} />}
      </AnimatePresence>

      <BottomTab isLoggedIn={isLoggedIn} />
    </>
  );
};
export default Cart;

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  let isLoggedIn = false;
  let userAddress = null;
  const jwt = ctx?.req?.cookies?.GulaGulaJwt;

  if (jwt) {
    try {
      const response = await jose.jwtVerify(
        jwt,
        new TextEncoder().encode(JWT_SECRET)
      );
      isLoggedIn = true;
      const _id = await response.payload.userId;
      const user = await User.findById(_id, { address: 1 });
      const { address } = JSON.parse(JSON.stringify(user));
      userAddress = address;
    } catch (error) {
      console.log(error);
    }
  }

  return {
    props: {
      isLoggedIn: isLoggedIn,
      userAddress: userAddress,
    },
  };
};
