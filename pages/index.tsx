import { useRef } from 'react';
import type { NextPage } from 'next';
import Head from 'next/head';
import { default as NavLink } from 'next/link';
import { GetServerSideProps } from 'next';

import Header from '../components/Header/Header';
import BottomTab from '../components/BottomTab/BottomTab';
import CardProduct from '../components/CardProduct/CardProduct';
import OrderBar from '../components/CartBar/CartBar';

import { ImSpoonKnife } from 'react-icons/im';
import { GoLocation } from 'react-icons/go';
import { VscPackage } from 'react-icons/vsc';
import { IProduct } from '../ts/interfaces/interfaces';

import { useFixedNavBar } from './../hooks/hooks';
import { useGetBusinessTime } from './../hooks/hooks';
import { Link } from 'react-scroll';

import globalStyles from './../styles/Global.module.css';
import styles from './../styles/Index.module.css';

import * as jose from 'jose';

import { connect } from 'mongoose';
import Product from '../models/Product';

const JWT_SECRET = process.env.JWT_SECRET;
const MONGODB_URI = process.env.MONGODB_URI || "";

const Home: NextPage<{ products: IProduct[]; isLoggedIn: boolean }> = ({
  products,
  isLoggedIn,
}) => {

  const isOpen = useGetBusinessTime()
  const isFixedNav = useFixedNavBar();
  const refs = useRef<any[]>([]);

  const handleActive = (index: number) => {
    if (refs.current[index]) {
      refs.current[index].scrollIntoView();
    }
  };


  return (
    <>
      <Head>
        <title>Home</title>
       
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Header />

      <main
        className={
          isFixedNav ? styles.main + ' ' + styles.mainActive : styles.main
        }
      >
        <div className={styles.header}>
          <div className={globalStyles.flexRowBetween}>
            <h3 className={styles.title}>
              <ImSpoonKnife style={{ marginRight: 6, color: '#696b70' }} />
              Massas & Bebidas
            </h3>
            <NavLink href='/about'>
              <span className={` ${styles.isBusinessOpen} ${isOpen.isOpen ? styles.open : styles.closed }  `}>{isOpen.state}</span>
            </NavLink>
          </div>
          <p className={styles.title}>
            <GoLocation style={{ marginRight: 6, color: '#696b70' }} />
            Avenida M. da Paz 26, - Centro, Rio de Janeiro - RJ
          </p>
        </div>

        <div className={styles.deliveryInfoContainer}>
          <span className={styles.deliveryInfo}>
            <VscPackage size={16} /> Entrega gr√°tis acima de R$ 80,00
          </span>
        </div>
        <nav
          className={
            isFixedNav ? styles.navActive + ' ' + styles.nav : styles.nav
          }
        >
          <ul className={styles.list}>
            {products?.map((opt, index) => {
              return (
                <li
                  key={opt.code}
                  ref={(element) => {
                    refs.current[index] = element;
                  }}
                  className={styles.listItem}
                >
                  <Link
                    spy={true}
                    smooth={true}
                    offset={-130}
                    to={opt.code}
                    onSetActive={() => handleActive(index)}
                    className={styles.navLink}
                    activeClass={styles.active}
                  >
                    {opt.name}
                  </Link>
                </li>
              );
            })}
          </ul>
        </nav>

        <div className={styles.itensContainer}>
          {products.map((product) => {
            return (
              <div id={product.code} key={product.code}>
                <h3 className={styles.itemTitle}>{product.name}</h3>
                {product.itens.map((singleprod) => {
                  return (
                    <CardProduct
                      id={product.code}
                      key={singleprod.code}
                      product={singleprod}
                    />
                  );
                })}
              </div>
            );
          })}
        </div>
      </main>
      <OrderBar />
      <BottomTab isLoggedIn={isLoggedIn} />
    </>
  );
};

export default Home;

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  let isLoggedIn = false;
  const jwt = ctx?.req?.cookies?.GulaGulaJwt;

  if (jwt) {
    try {
      await jose.jwtVerify(jwt, new TextEncoder().encode(JWT_SECRET));
      isLoggedIn = true;
    } catch (error) {
      console.log(error);
    }
  }

  await connect(MONGODB_URI)
  const products = await Product.find()
  const parsedproducts = JSON.parse(JSON.stringify(products))

  return {
    props: {
      products: parsedproducts,
      isLoggedIn: isLoggedIn,
    },
  };
};
