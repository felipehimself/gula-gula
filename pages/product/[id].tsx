import React, { useState, useEffect, useCallback } from 'react';
import type { GetServerSideProps } from 'next';
import Image from 'next/image';
import Head from 'next/head';
import { useRouter } from 'next/router';

import { getNumberOfPeople } from '../../utils/functions';
import { IItens,IChoose } from '../../ts/interfaces/interfaces';

import Topbar from '../../components/Topbar/Topbar';
import { MdOutlineTextsms } from 'react-icons/md';
import { FiPlus, FiMinus} from 'react-icons/fi'

import styles from './../../styles/Product.module.css';
import globalStyles from './../../styles/Global.module.css';

import { useAppDispatch } from '../../store/store';
import { addToCart } from '../../features/cartSlice';

import { getInitialValue } from '../../utils/functions';
import { v4 as uuidv4 } from 'uuid';

import { connect } from 'mongoose';
import Product from '../../models/Product';
const MONGODB_URI = process.env.MONGODB_URI || "";

const ProductDetails: React.FC<{ product: IItens }> = ({ product }) => {
  const [isDisabled, setIsDisabled] = useState(false);
  const [choose, setChoose] = useState<IChoose>({ product: product.description, notes: null, options: [],
    productId: product.id,
    orderId: uuidv4()
  });

  const [totalAndQty, setTotalAndQty] = useState({total: getInitialValue(product) , qty: 1});
  
  const dispatch = useAppDispatch();
  const router = useRouter();

  const handleChange = (e: React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLTextAreaElement>, price?: number) => {
    const { value, name } = e.target;

    if (name !== 'notes') {
      const exists = choose?.options?.find((item) => item.id === name);

      if (exists) {
        const newState = choose.options.map((item) => {
          if (item.id === name) {
            return { option: value, price: price, id: name };
          }
          return item;
        });

        setChoose((prev) => ({ ...prev, options: newState }));
        setTotalAndQty((prev) => ({ ...prev, total: (prev.total - exists?.price!) + price! }));

      } else {
        const newState = [
          ...choose.options,
          { option: value, price: price, id: name },
        ];
        setChoose((prev) => ({ ...prev, options: newState }));
        setTotalAndQty((prev) => ({ ...prev, total: prev.total + price! }));

      }
    } else {
      setChoose((prev) => ({ ...prev, [name]: value }));
    }

    
    
  };

  const checkDisabled = useCallback(() => {
    if (!product?.needChoices) {
      setIsDisabled(false);
      return;
    }

    if (
      product?.needChoices &&
      Object.keys(choose.options).length < product?.choices?.length!
    ) {
      setIsDisabled(true);
      return;
    }
    setIsDisabled(false);
  }, [product, choose]);

  const handleQuantity = (operation: string) => {
    if(operation === 'plus'){
      setTotalAndQty((prev)=> ({
        ...prev, qty: prev.qty +1
      }))
    } else {
      setTotalAndQty((prev)=>{
        if((prev.qty - 1) <= 0){
          return {...prev, qty: 1}
        } else {
          return {...prev, qty: prev.qty - 1}
        }
      })
    }
  };

  const handleAddToCart = () => {
    if (Object.keys(choose.options).length < product?.choices?.length!) return;

    const stateToDispatch = {
      ...choose,
      totalQty: totalAndQty.qty,
      totalAmt: totalAndQty.total * totalAndQty.qty,
    };

    dispatch(addToCart(stateToDispatch));
    router.push('/');
  };


  useEffect(() => {
    checkDisabled();
  }, [product, choose, checkDisabled]);


  return (
    <>
      <Head>
        <title>{product.description}</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Topbar title={product.description} />
      <div className={`${globalStyles.container} ${globalStyles.spacing}`}>
        <div className={globalStyles.imageContainerLarge}>
          <Image
            width='800'
            height='250'
            objectFit='cover'
            src={product.img}
            alt=''
          />
        </div>
        <div className={styles.infoContainer}>
          <h3>{product.description}</h3>
          <p>{product.details}</p>
          {product?.productTags?.[0]?.tags && (
            <p className={globalStyles.colorGrey}>
              {getNumberOfPeople(product?.productTags?.[0]?.tags)}
            </p>
          )}
          {product.unitPrice > 1 ? (
            <div className={globalStyles.flexRow}>
              <p>R$ {product.unitPrice.toFixed(2)}</p>
              {product.unitOriginalPrice && (
                <p className={`${globalStyles.lineThrough}`}>
                  R$ {product.unitOriginalPrice.toFixed(2)}
                </p>
              )}
            </div>
          ) : (
            <p>A partir de R$ {product.unitMinPrice.toFixed(2)}</p>
          )}
        </div>
      </div>

      <div className={globalStyles.customBackground}>
        <div className={globalStyles.container}>
          {product?.needChoices &&
            product?.choices?.map((choice, ind) => {
              return (
                <section key={choice.code}>
                  <h3 className={styles.sectionTitle}>{choice.name}</h3>
                  {choice.garnishItens.map((garnish) => {
                    return (
                      <article className={styles.optionCard} key={garnish.id}>
                        <div className={styles.optionText}>
                          <h3>{garnish.description}</h3>
                          <p>{garnish.details}</p>
                          {garnish?.unitPrice > 0 && (
                            <p>+ R$ {garnish.unitPrice.toFixed(2)}</p>
                          )}
                        </div>
                        <input
                          className={styles.checkBox}
                          value={garnish.description}
                          type='radio'
                          name={
                            choice.name.split(' ').slice(-1) + String(ind + 1)
                          }
                          onChange={(e) => {
                            handleChange(e, garnish.unitPrice);
                          }}
                        />
                      </article>
                    );
                  })}
                </section>
              );
            })}
          <h3
            className={`${globalStyles.flexRow} ${globalStyles.spacingTopBottom}`}
          >
            <MdOutlineTextsms size={18} />
            Alguma observação?
          </h3>
          <textarea
            className={styles.textArea}
            name='notes'
            onChange={(e) => handleChange(e)}
            placeholder='Digite as observações aqui...'
          />
        </div>
      </div>
      <div className={styles.bottomTab}>
        <footer className={styles.bottonContainer}>
          <div className={globalStyles.flexRow}>
            <button
              className={isDisabled ? styles.button : styles.buttonActive}
              disabled={isDisabled}
              onClick={() => handleQuantity('minus')}
              aria-label='Diminuir um'
            >
              <FiMinus size={14} color={isDisabled ? '#000' : '#fff'} />
            </button>
            <span className={styles.quantity}>{totalAndQty?.qty}</span>
            <button
              className={isDisabled ? styles.button : styles.buttonActive}
              disabled={isDisabled}
              onClick={() => handleQuantity('plus')}
              aria-label='Aumentar um'
            >
              <FiPlus size={14} color={isDisabled ? '#000' : '#fff'} />
            </button>
          </div>
          <div>
            <button
              className={isDisabled ? styles.buttonAdd : styles.buttonAddActive}
              disabled={isDisabled}
              onClick={handleAddToCart}
              aria-label='Adicionar ao carrinho'
            >
              Adicionar
              <span className={styles.total}>R$ {(totalAndQty.total * totalAndQty.qty).toFixed(2)}</span>
            </button>
          </div>
        </footer>
      </div>
    </>
  );
};

export default ProductDetails;

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const productId = ctx?.query?.id;
  
  await connect(MONGODB_URI).catch(err => console.log(err))
  
  const product = await Product.aggregate([
      {$match: {'itens.id': productId}},
      {$unwind: '$itens'},
      {$match: {'itens.id': productId}},
      {$project: {_id: 0, code: 0, name: 0} },
      {
        $replaceRoot: {
            newRoot: "$itens"
        }
      }
  ])
  if ((product.length === 0 || !product)) {
    return {
      redirect: {
        permanent: false,
        destination: "/",
      },
      props:{},
    };

  }

  const resProduct = JSON.parse(JSON.stringify(product))[0]
  
  return {
    props: {
      product: resProduct,
    },
  };
};
