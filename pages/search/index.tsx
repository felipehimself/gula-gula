import { useState } from 'react';
import { useRouter } from 'next/router';
import type { GetServerSideProps } from 'next';
import type { NextPage } from 'next';
import Head from 'next/head';

import { FiArrowLeft, FiXCircle, FiSearch } from 'react-icons/fi';

import globalStyles from './../../styles/Global.module.css';
import styles from './../../styles/Search.module.css';

import BottomTab from '../../components/BottomTab/BottomTab';
import CardProduct from '../../components/CardProduct/CardProduct';

import { IItens } from '../../ts/interfaces/interfaces';

import { connect } from 'mongoose';
import * as jose from 'jose';

import Product from '../../models/Product';

const { motion } = require('framer-motion');

const MONGODB_URI = process.env.MONGODB_URI || '';
const JWT_SECRET = process.env.JWT_SECRET;


const Pesquisar: NextPage<{ products: IItens[], isLoggedIn:boolean }> = ({ products,isLoggedIn }) => {
  const [allProducts, setAllproducts] = useState(products);
  const [term, setTerm] = useState('');

  const router = useRouter();

  return (
    <>
      <Head>
        <title>Pesquisar</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }}>
        <div className={globalStyles.fixedContainer}>
          <div className={styles.innerContainer}>
            <button className={styles.backButton} onClick={() => router.back()}>
              <FiArrowLeft size={20} />
            </button>
            <div className={styles.inputContainer}>
              <FiSearch size={16} />
              <input
                placeholder='Procure por um produto aqui...'
                type='text'
                className={styles.input}
                value={term || ''}
                onChange={(e) => setTerm(e.target.value)}
              />
              <button className={styles.closeBtn} onClick={() => setTerm('')}>
                <FiXCircle size={18} />
              </button>
            </div>
          </div>
        </div>
        <div className={`${globalStyles.container} ${styles.searchContainer}`}>
          {term &&
            allProducts
              ?.filter(
                (item) =>
                  item.description.toLowerCase().includes(term.toLowerCase()) ||
                  item?.details?.toLowerCase().includes(term.toLowerCase())
              )
              .map((product) => {
                return <CardProduct key={product.id} product={product} />;
              })}

          {term &&
            allProducts?.filter(
              (item) =>
                item.description.toLowerCase().includes(term.toLowerCase()) ||
                item?.details?.toLowerCase().includes(term.toLowerCase())
            ).length === 0 && (
              <h2 className={`${globalStyles.center} ${styles.searchMessage}`}>
                Nenhum produto encontrado
              </h2>
            )}

          {!term && (
            <h2 className={`${globalStyles.center} ${styles.searchMessage}`}>
              Nenhuma busca at√© o momento
            </h2>
          )}
        </div>
      </motion.div>
      <BottomTab isLoggedIn={isLoggedIn}/>
    </>
  );
};
export default Pesquisar;

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  let isLoggedIn = false;
  const jwt = ctx?.req?.cookies?.GulaGulaJwt;

  if (jwt) {
    try {
      await jose.jwtVerify(jwt, new TextEncoder().encode(JWT_SECRET));
      isLoggedIn = true;
    } catch (error) {
      console.log(error);
    }
  } 

  await connect(MONGODB_URI).catch((err) => console.log(err));
  const products = await Product.aggregate([
    { $project: { _id: 0, itens: 1 } },
    { $unwind: '$itens' },
    {
      $replaceRoot: {
        newRoot: '$itens',
      },
    },
  ]);

  const productsParsed = JSON.parse(JSON.stringify(products))
  
  return {
    props: {
      products: productsParsed,
      isLoggedIn: isLoggedIn
    },
  };
};
